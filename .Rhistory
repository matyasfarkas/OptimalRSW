q()
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("pkgbuild")
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install.packages("jsonlite",type="source")
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("pkgbuild")
install.packages("pkgbuild")
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install.packages("jsonlite",type="source")
Sys.getenv("BINPREF")
[1] ""
install.packages("jsonlite",type="source")
Sys.getenv("BINPREF")
Sys.getenv("BINPREF")
readLines("~/.Rprofile")
file.path(Sys.getenv("HOME"), ".Rprofile")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
Sys.which("make")
install.packages("jsonlite", type = "source")
Sys.which("make")
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.Rtools(check = F)
install.Rtools()
install.packages("install.Rtools", type = "source")
install.packages("install.Rtools")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
install.packages("jsonlite", type = "source")
install.packages("jsonlite", type = "source")
Sys.getenv("BINPREF")
Sys.getenv("PATH")
install.packages("jsonlite", type = "source")
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("blogdown")
blogdown::install_hugo()
example(stan_model, package = "rstan", run.dontrun = TRUE)
remove.packages(c("StanHeaders", "rstan"))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
example(stan_model, package = "rstan", run.dontrun = TRUE)
library(rstan)
example(stan_model, package = "rstan", run.dontrun = TRUE, dependencies =TRUE#)
example(stan_model, package = "rstan", run.dontrun = TRUE, dependencies =TRUE)
remove.packages(c("StanHeaders", "rstan"))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.which("make")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(rstan)
example(stan_model, package = "rstan", run.dontrun = TRUE)
# ############################################################################
# (c) 3Eq NK model a la Rotember Woodford model with MS Regimes              #
#                                                                            #
# Authors:  Matyas Farkas, ECB and Kai Christoffel, ECB                      #
# ############################################################################
setwd("C:/Users/fm007/Documents/GitHub/OptimalRSW")
# load gEcon package
library(gEcon)
# make and load the model
rsw <- make_model("RSW.gcn")
# find and print steady-state values
rsw <- steady_state(rsw)
get_ss_values(rsw, to_tex = TRUE)
# find and print perturbation solution
rsw <- solve_pert(model = rsw,loglin = TRUE)
check_bk(rsw)
var_info(rsw,all =T)
get_pert_solution(rsw, to_tex = TRUE)
# set and print the shock distribution parameters
rsw <- set_shock_cov_mat(rsw, cov_matrix = matrix(c(0.01), 1, 1),
shock_order = c("epsilon_Z"))
shock_info(rsw, all = TRUE)
# compute and print correlations
rsw <- compute_model_stats(rsw, ref_var = "iH", n_leadlags = 5)
get_model_stats(model = rsw,
basic_stats = TRUE,
corr = TRUE,
autocorr = TRUE,
var_dec = FALSE,
to_tex = TRUE)
# compute and print the IRFs
rsw_irf <- compute_irf(rsw,
variables = c("iH", "iL", "piH", "piL", "yH", "yL"))
plot_simulation(rsw_irf, to_eps = TRUE)
# print summary of the model results
summary(rsw)
